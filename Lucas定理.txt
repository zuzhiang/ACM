Lucas定理是用来求 c(n,m) mod p，p为素数的值。时间复杂度为：logp(n) * p

结论1. Lucas(n,m,p)=c(n%p,m%p)*Lucas(n/p,m/p,p);

结论2. 把n写成p进制a[n]a[n-1]a[n-2]...a[0]，把m写成p进制b[n]b[n-1]b[n-2]...b[0]，则C(n,m)与C(a[n],b[n])*C(a[n-1],b[n-1])*C(a[n-2],b[-2])*....*C(a[0],b[0])模p同余。

注：n,m不能大于10^5，不大于情况下用逆元的方法可以解决，如果大了就不能解决。


//数据在1e9左右时直接处理，速度慢
//Lucas定理实现C(n,m)%p的代码：
LL exp_mod(LL a, LL b, LL p) 
{ //快速幂取模
    LL res = 1;
    while(b != 0) 
    {
        if(b&1) res = (res * a) % p;
        a = (a*a) % p;
        b >>= 1;
    }
    return res;
}

LL Comb(LL a, LL b, LL p) 
{ //组合数
    if(a < b)   return 0;
    if(a == b)  return 1;
    if(b > a - b)   b = a - b;

    LL ans = 1, ca = 1, cb = 1;
    for(LL i = 0; i < b; ++i) 
    {
        ca = (ca * (a - i))%p;
        cb = (cb * (b - i))%p;
    }
    ans = (ca*exp_mod(cb, p - 2, p)) % p;
    return ans;
}

LL Lucas(LL n,LL m,LL p) 
{ //卢卡斯
     LL ans = 1;

     while(n&&m&&ans) 
    {
        ans = (ans*Comb(n%p, m%p, p)) % p;
        n /= p;
        m /= p;
     }
     return ans;
}


//数据在1e5左右时打表解决，速度更快
//Lucas定理实现C(n,m)%p的代码：
LL pow_mod(LL a, LL b, LL mod)
{ //快速幂取模
    LL ret=1;
    while(b)
	{
        if(b&1) ret = (ret * a) % mod;
        a = (a*a) % mod;
        b >>= 1;
    }        
    return ret;
}

LL fac[100005];

void get_fact()    
{ //预处理阶乘
    int p = 100005;
    fac[0] = 1;
    for(LL i = 1;i <= p; i++)
        fac[i] = (fac[i-1] * i) % mod;
}

LL Lucas(LL n,LL m,LL p)
{ //卢卡斯
    LL ret = 1;
    while(n && m)
	{
        LL a = n%p, b = m%p;
        if(a<b) return 0;
        ret = (ret * fac[a] * pow_mod(fac[b] * fac[a-b] % p, p-2, p)) % p;
        n /= p;
        m /= p;
    }
    return ret;
}



对任意质数p有(1+x)^p=1+(x^p)(mod p)