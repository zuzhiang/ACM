在#include<stdlib.h>头文件中
用 法: void qsort(待排序数组首地址,数组中待排序元素数量,各元素的占用空间大小,指向函数的指针)
qsort 要求提供一个比较函数，如果比较函数返回大于0，qsort就认为 a>b ,降序排列； 如果比较函数返回等于0 qsort就认为a=b；返回小于0,qsort就认为 a<b,升序排列。

一、对int类型数组排序

int num[100];

int cmp ( const void *a , const void *b )
{ 
	return *(int *)a - *(int *)b; 
}

qsort(num,100,sizeof(num[0]),cmp);

二、对char类型数组排序（同int类型）

char word[100];

int cmp( const void *a , const void *b )
{
	 return *(char *)a - *(char *)b; 
}

qsort(word,100,sizeof(word[0]),cmp);

三、对double类型数组排序（特别要注意）

double in[100];

int cmp( const void *a , const void *b )
{ 
	return *(double *)a > *(double *)b ? 1 : -1; 
}

qsort(in,100,sizeof(in[0]),cmp)；

四、对结构体一级排序

struct In 
{ 
    double data; 
    int other; 
} s[100];

//按照data的值从小到大将结构体排序,关于结构体内的排序关键数据data的类型可以很多种，

//参考上面的例子写

int cmp( const void *a ,const void *b)
{ 
	return (*(In *)a).data > (*(In *)b).data ? 1 : -1; 
}

qsort(s,100,sizeof(s[0]),cmp);

五、对结构体二级排序

struct In 
{ 
    int x; int y; 
} s[100];

//按照x从小到大排序，当x相等时按照y从大到小排序

int cmp( const void *a , const void *b ) 
{
	struct In *c = (In *)a; struct In *d = (In *)b;
	if(c->x != d->x) 
	          return c->x - d->x; 
	else 
        	  return d->y - c->y;
}

