对于一个有三个或以上点的点集Q，Graham扫描法的过程如下：

　　令p0为Q中Y-X坐标排序下最小的点 
　　设<p1,p2,...pm>为对其余点按以p0为中心的极角逆时针排序所得的点集（如果有多个点有相同的极角，除了距p0最远的点外全部移除
　　压p0进栈S
　　压p1进栈S
　　压p2进栈S
    for i ← 3 to m
      do while 由S的栈顶元素的下一个元素、S的栈顶元素以及pi构成的折线段不拐向左侧
        对S弹栈
      压pi进栈S
    return S;
若计算周长。将边相加               zoj1453
若计算面积。穷举三点构成的三角形。。找最大zoj2419

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define MaxNode 100015
int stack[MaxNode];
int top;
typedef struct POINT
{
    int x;
    int y;
}POINT;
POINT point[MaxNode];
void swap(POINT point[],int i,int j)
{
    POINT tmp;
    tmp=point[i];
    point[i]=point[j];
    point[j]=tmp;
}
double multi(POINT p1,POINT p2,POINT p0) //叉乘
{
    return ((p1.x-p0.x)*(p2.y-p0.y)-(p1.y-p0.y)*(p2.x-p0.x));
}
double distence(POINT p1,POINT p2) //p1,p2的距离
{
    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}
int cmp(const void *a,const void *b) 
{
    POINT *c=(POINT *)a;
    POINT *d=(POINT *)b;
    double k=multi(*c,*d,point[0]);
    if(k<0) return 1;
    else if(k==0&&distence(*c,point[0])>=distence(*d,point[0])) return 1; //极角相同，比距离
    else return -1;
}
void grahamscan(int n)
{
    int i,u;
    u=0;
    for(i = 1;i<= n-1;i++) //找到最左下的点p0
        if((point[i].y < point[u].y)||(point[i].y==point[u].y&&point[i].x < point[u].x))
            u=i;
    swap(point,0,u);
    qsort(point+1,n-1,sizeof(point[0]),cmp); //按极角排序
    for(i = 0;i <= 2;i++) stack[i] = i; //p0,p1,p2入栈
    top=2;
    for(i = 3;i <= n-1;i++) //最终凸包的各顶点的编号依次存在stack[]中。
    {
        while(multi(point[i],point[stack[top]],point[stack[top-1]])>=0) //弹出非左转的点
     {
            if(top==0)break;
            top--;
    }
        top++;
        stack[top] = i;
    }
}
//求凸包的面积
double polygonArea(int n,POINT p[])
{
    double area;
    int i;
    area = 0;
    for(i = 1;i <= n;i++){
        area += (p[stack[i - 1]].x * p[stack[i % n]].y - p[stack[i % n]].x * p[stack[i - 1]].y);
    }
    return fabs(area) / 2;
}

int main()
{
    int i;
    for(i=0;i<10;i++)
        scanf("%d%d",&(point[i].x),&(point[i].y));
    grahamscan(10);
    printf("%lf\n",polygonArea(10,point));
}