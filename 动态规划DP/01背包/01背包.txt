首先01背包题目的雏形是:
有N件物品和一个容量为V的背包。第i件物品的价值是p[i]，体积是w[i]。求解将哪些物品装入背包可使价值总和最大。

从这个题目中可以看出，01背包的特点就是：每种物品仅有一件，可以选择放或不放。

01背包的二维数组解法的状态转移方程是：

          f[i-1,j]                     ,不放第i件物品(放不下第i个物品)
f[i,j] ={ 
          Max(f[i-1,j-wi]+pi,f[i-1,j]) ,（j>=pi）放第i件物品

f[i,j]表示在前i件物品中选择若干件放在剩余空间为j的背包中，可以取得的最大价值。f[i-1,j]表示前i-1件物品中选取若干件物品放入剩余空间为j的背包中所能得到的最大价值；f[i-1,j-wi]+pi表示前i-1件物品中选取若干件物品放入剩余空间为j-wi的背包中所能去得的最大价值加上第i件物品的价值。

根据第i件物品放或是不放确定遍历到第i件物品时的状态f[i][j]。


01背包的一维数组解法的状态转移方程：
for i=1..N
    for v=V..0
	f[j]=max(f[j],f[j-w[i]]+p[i])

外层循环遍历物品的编号，即前i件物品，内层循环遍历背包剩余的空间。



求背包中放了哪些物品呢：

  根据算法求出的最大价值表本身其实含有位置信息，从F[N][V]逆着走向F[0][0]，设i=N,j=V，如果F[i][j]==F[i-1][j-C[i]]+W[i]说明包里面有第i件物品，同时j -= C[i]，不管F[i][j]与F[i-1][j-C[i]]+W[i]相不相等i都要减1，因为01背包的第i件物品要么放要么不放，不管放还是不放其已经遍历过了，需要继续往下遍历。

当题目要求求“恰好装满背包”时的最优解时：初始化时除了f[0]为0,其他f[1..v]均设为负无穷
如果没要求“恰好装满背包”时，初始化时应该把f[0..v]都设为0

