单调栈就是保持一定单调性的栈，单调递减栈就是从栈顶到栈底单调递减。

针对单调递减栈：
如果栈为空或入栈元素值大于栈顶元素值，则入栈；否则，如果入栈则会破坏栈的单调性，则需要把比入栈元素大的元素全部出栈。


应用：

1.给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数。
2.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。
3.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列所有元素和最大。

代码实现：
while(!st.empty()) st.pop();
a[n]=-1;
for(i=0;i<=n;i++)
{
	if(st.empty()||a[i]>a[st.top()])
	{
		st.push(i);
	}
	else
	{
		while(!st.empty()&&a[i]<a[st.top()])
		{
			top=st.top();
			st.pop();
			//相应的操作
		}
		st.push(top);
		a[top]=a[i];
	}
}

注意：单调栈记录的是元素的位置。将不破坏栈单调性的元素都出栈后，最后一次出栈的元素就是当前入栈元素能拓展到的最左位置，更新其对应的值，并将其位置入栈。


