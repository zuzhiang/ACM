http://www.cnblogs.com/gaochundong/p/suffix_tree.html

KMP等符串匹配算法均是通过对模式（Pattern）字符串进行预处理的方式来加快搜索速度。对 Pattern 进行预处理的最优复杂度为 O(m)，其中 m 为 Pattern 字符串的长度。那么，有没有对文本（Text）进行预处理的算法呢？本文即将介绍一种对 Text 进行预处理的字符串匹配算法：后缀树（Suffix Tree）。

后缀树的性质：

存储所有 n(n-1)/2 个后缀需要 O(n) 的空间，n 为的文本（Text）的长度；
构建后缀树需要 O(dn) 的时间，d 为字符集的长度（alphabet）；
对模式（Pattern）的查询需要 O(dm) 时间，m 为 Pattern 的长度；




应用：

1. 字符串匹配。求字符串t在字符串s中出现的位置。

2. 求字符串s任意两个后缀的最长公共前缀。

3. 求字符串s和字符串t的最长公共子串

4. 求字符串s中不同子串的个数

5. 求可重叠/不可重叠最长重复子串

6. 求字符串s中的最长回文子串

