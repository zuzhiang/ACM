算法中需要用到的主要变量

int n;  //表示n个点，从1到n标号

int s,t;  //s为源点，t为终点

int d[N];  //d[i]表示源点s到点i的最短路

int p[N];  //记录路径（或者说记录前驱）

queue <int> q;  //一个队列，用STL实现，当然可有手打队列，无所谓

bool vis[N];   //vis[i]=1表示点i在队列中 vis[i]=0表示不在队列中

 
几乎所有的最短路算法其步骤都可以分为两步

1.初始化

2.松弛操作

 

初始化： d数组全部赋值为INF（无穷大）；p数组全部赋值为s（即源点），或者赋值为-1，表示还没有知道前驱然后d[s]=0;  表示源点不用求最短路径，或者说最短路就是0。将源点入队；(另外记住在整个算法中有顶点入队了要记得标记vis数组，有顶点出队了记得消除那个标记）

队列+松弛操作

读取队头顶点u，并将队头顶点u出队（记得消除标记）；将与点u相连的所有点v进行松弛操作，如果能更新估计值（即令d[v]变小），那么就更新，另外，如果点v没有在队列中，那么要将点v入队（记得标记），如果已经在队列中了，那么就不用入队

以此循环，直到队空为止就完成了单源最短路的求解

int spfa(int s) //
{
    int x;
    queue <int> q;
    memset(d,0x3f3f3f3f,sizeof(d));
    d[s]=0;
    memset(num,0,sizeof(num));
    memset(vis,0,sizeof(vis));

    q.push(s);  vis[s]=1; num[s]=1;
    //顶点入队vis要做标记，另外要统计顶点的入队次数
    int OK=1;
    while(!q.empty())
    {
        x=q.front(); q.pop();  vis[x]=0;
        //队头元素出队，并且消除标记
        for(int k=first[x]; k!=0; k=next[k]) //遍历顶点x的邻接表
        {
            int y=v[k];
            if( d[x]+w[k] < d[y])
            {
                d[y]=d[x]+w[k];  //松弛
                if(!vis[y])  //顶点y不在队内
                {
                    vis[y]=1;    //标记
                    num[y]++;      //统计次数
                    q.push(y);   //入队
                    if(num[y]>NN)  //超过入队次数上限，说明有负环
                        return OK=0;
                }
            }
        }
    }
    return OK;
}

 