http://www.cnblogs.com/zichi/p/4806998.html

树状数组主要用于查询任意区间的所有元素之和，但是每次只能修改一个元素的值。
lowbit(k)就是把k的二进制的高位1全部清空，只留下最低位的1
lowbit(k)的值等于k为2^x，其中x为k的二进制中末尾0的个数
它就是为了联系a数组和c数组的！ck表示从ak开始往左连续求lowbit(k)个数的和

树状数组一般适用于三类问题：
1.修改一个点求一个区间
2.修改一个区间求一个点
3.修改一个区间求一个区间
4.求逆序列对


问题1：修改一个点求一个区间

一维树状数组：
int n,a[MAX],sum[MAX];
//n为原数组的大小;a:原数组,记录单点值;sum：树状数组,记录前i项和
//树状数组的下标是从1开始的 

int lowbit(int x)
{ //lowbit(k)就是把k的二进制的高位1全部清空，只留下最低位的1
    return x&(-x);
}

void update(int x,int p)//将第x个数加p 
{//更新 
	int i;
	for(i=x;i<=n;i+=lowbit(i))    
        sum[i]+=p;
}

int query(int k)
{//前k个数的和
    int i,ans=0;
    for(i=k;i>0;i-=lowbit(i))
        ans+=sum[i];
    return ans;
}

int ask(int l,int r)
{//求l-r区间和 
    return query(r)-query(l-1); 
}




二维树状数组：
int n,tt[MAX][MAX];

int lowbit(int x)
{
    return x&(-x);
}

void update(int x,int y,int p)
{
    int i,j;
    for(i=x;i<=n;i+=lowbit(i))
    	for(j=y;j<=n;j+=lowbit(j))
    		tt[i][j]+=p;
}

int query(int x,int y)
{//查询（1，1）到（x，y）的数的总和。
    int i,j,ans=0;
    for(i=x;i>0;i-=lowbit(i))
    	for(j=y;j>0;j-=lowbit(j))
    		ans+=tt[i][j];
    return ans;
}

问题2：修改一个区间求一个点
int sum[MAX];
//sum为树状数组，记录i节点所管辖节点的批量统一增量

int lowbit(int x)
{
    return x&(-x);
}

void update(int x,int p)
{
	int i;
	for(i=x;i>0;i-=lowbit(i))    
        sum[i]+=p;
}

int query(int k)
{ //把可以管辖到节点i的父节点的sum值累加起来就是该点增量
    int i,ans=0;
    for(i=k;i<=n;i+=lowbit(i))
        ans+=sum[i];
    return ans;
}

对区间(l,r)更新时，需要update(r,1);update(l-1,-1);第二个变量val值据题目而定，不一定为1
即对(0,r)区间更新，再对(0,l-1)更新以消除对（0,l-1）的影响


问题3：修改一个区间求一个区间



当所求区间为染色区间的父区间时，转化为改点求段的思路；若所求区间为染色区间的子区间，转化为改段求点的思路。两种情况互不影响，结果相加即可。

注意查询时，下标值不能为0


问题4：求逆序对
代码同修改点查询区间。
对于输入的每个数字，ans+=i-query(a+1);update(a+1); i为下标从0开始


注意：一般的用数组数组来解的题，都是不用a[0]的，也就是元素是从a[1]~a[n]

PS：用树状数组能够解决的问题，用线段树肯定能够解决，反之则不一定。
但是树状数组有一个明显的好处就是较为节省空间，实现要比线段树要容易得多，而且在处理某些问题的时候使用树状数组效率反而会高得多。